global !p
from datetime import datetime
import uuid
import tzlocal
def date_now():
	return datetime.now(tzlocal.get_localzone()).strftime("%Y-%m-%d %H:%M")

def suuid():
	return str(uuid.uuid4().hex)[0:5]

def from_options(t, options):
	if t:
		options = [m[len(t):] for m in options if m.startswith(t)]
	if len(options) == 1:
		return options[0]
	else:
		return "(" + "|".join(options) + ")"

endglobal

snippet 'rep (\d+) (\w+)' "Repeat" r
`!p snip.rv = int(match.group(1))*match.group(2)`
endsnippet

snippet defect "defect found in test" b
-------------------------------------------------------------------------------
*Defect*   ${1:Defect Number - Test Section Number} (${2:Name Of Test})
*Date*     ${3:`!p snip.rv = date_now()`}
*Id*       `!p
if not snip.c:
  snip.rv = suuid()`
*Severity* $4`!p snip.rv=from_options(t[4], ['critical','major','minor','trivial'])`
-------------------------------------------------------------------------------
*Symptoms*
$6

-------------------------------------------------------------------------------
*Reproduction Steps*
$7

-------------------------------------------------------------------------------
endsnippet

snippet 'rep (\d+) (\w+)' "Repeat" r
`!p snip.rv = int(match.group(1))*match.group(2)`
endsnippet

snippet troub "trouble shooting methodology" !b
*${1:investigation name}*
= Observe =
  *Evidence:*
		[[evidence.`!p snip.rv = fn`|evidence]]

  *What defines Success?:*
		[[subgoals.`!p 
from pathlib import Path
goals_path = 'subgoals.' + snip.basename + '.wiki'
if not (Path('.') / goals_path).exists():
	with open("./"+goals_path, "w") as fp:
		fp.write("[[{}|back]]\n".format(snip.basename))
		fp.write("= Subgoals =\n")
		fp.write("* [ ] \n")
		fp.write("* [ ] \n")
snip.rv = snip.basename
`|subgoals]]
		${2:what is your primary goal}

  *What is the problem?*
		${3:what seems to be the problem?}
	
= Orient =
  *Symptoms:* [[symptoms.`!p snip.rv = fn`|symptoms]]

  *Questions for $1:*
    Can you simplify your test?
    Do you have enough information?
    What recently changed?
	
== Assumptions == 

= Decide =
  *Research Goal:*
    $4

  *Idea/Hypotheses for $1: >=5*
  * [ ] $5
  * [ ] $6
  * [ ] $7
  * [ ] $8
  * [ ] $9

  *Chosen Research-Goal/Hypothesis*
    $0

== Plan ==
	[[plan.`!p snip.rv = fn`|plan]]

= Act =
  [[#Plan]]
  [[#Evidence]]

endsnippet

# [[<name_without_wiki>|goal_like_this]]
snippet goal "writing a goal link to new OODA loop" 
$1`!p
goal_name_underscore = t[1].replace(" ", "_")
goal_name_underscore = goal_name_underscore.replace("?", "")
snip.rv = " [[{}|link]]".format(goal_name_underscore)
`$0`!p
from pathlib import Path
current_line = snip.buffer[snip.buffer.cursor[0]]
m = re.search('\[\[(.+)\\|.+\]\]', current_line)
if m is not None and len(m.groups()) == 1:
  file_name = m.group(1) + ".wiki"
  with open(file_name, "w") as fp:
    fp.write("[[{}|back]]\n".format(snip.basename))
  if len(file_name) >= 7:
    try:
      os.remove(str(Path(file_name).stem)[0:-1]+".wiki")
    except:
			# might be making file noise
			pass

`
endsnippet 


snippet uuid "UUID" !b
`!p import uuid
if not snip.c:
  snip.rv = uuid.uuid4().hex`
endsnippet
