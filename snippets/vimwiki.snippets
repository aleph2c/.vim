global !p
from datetime import datetime
import uuid
import tzlocal
def date_now():
	return datetime.now(tzlocal.get_localzone()).strftime("%Y-%m-%d %H:%M")

def suuid():
	return str(uuid.uuid4().hex)[0:5]

def from_options(t, options):
	if t:
		options = [m[len(t):] for m in options if m.startswith(t)]
	if len(options) == 1:
		return options[0]
	else:
		return "(" + "|".join(options) + ")"

endglobal

snippet 'rep (\d+) (\w+)' "Repeat" r
`!p snip.rv = int(match.group(1))*match.group(2)`
endsnippet

snippet defect "defect found in test" b
-------------------------------------------------------------------------------
*Defect*   ${1:Defect Number - Test Section Number} (${2:Name Of Test})
*Date*     ${3:`!p snip.rv = date_now()`}
*Id*       `!p
if not snip.c:
  snip.rv = suuid()`
*Severity* $4`!p snip.rv=from_options(t[4], ['critical','major','minor','trivial'])`
-------------------------------------------------------------------------------
*Symptoms*
$6

-------------------------------------------------------------------------------
*Reproduction Steps*
$7

-------------------------------------------------------------------------------
endsnippet

snippet 'rep (\d+) (\w+)' "Repeat" r
`!p snip.rv = int(match.group(1))*match.group(2)`
endsnippet

snippet troub "trouble shooting methodology" !b
*${1:${VISUAL:name_of_investigation}}*
= Observer ([[local:`!v trim(substitute(substitute(execute('echo $MYVIMRC'),'\\.vimrc', '', 'g'), '\', '/', "g"))`/ooda.pdf|diagram]]) = 
== Evidence ([[evidence.`!p snip.rv = snip.basename`|evidence]]) ==

  *What defines Success?:* ([[subgoals.`!p 
from pathlib import Path
target_dir = Path(path).parent
os.chdir(str(target_dir))
goals_path = 'subgoals.' + snip.basename + '.wiki'
if not (Path('.') / goals_path).exists():
	with open("./"+goals_path, "w") as fp:
		fp.write("[[{}|back]]\n".format(snip.basename))
		fp.write("= Subgoals =\n")
		fp.write("* [ ] \n")
snip.rv = snip.basename
`|subgoals]])
		${2:what is your primary goal}

  *What is the problem?*
		${3:what seems to be the problem?}
	
= Orient =
  *Symptoms:* [[symptoms.`!p snip.rv = snip.basename`|symptoms]]

== Questions ==
  *Questions for $1: >= 5*
    Do you have enough information?
    Are your resources organized so you can quickly find them?
    Can you reproduce the problem?
    Can you simplify the test?
    What recently changed?
    What don't you know that you need to know?
	
  *Assumptions*

= Decide =
  [[#Questions]]
  *Research Needed For?:*
    $4

  [[#Questions]]
  *Idea/Hypotheses for $1: >=5*
  * [ ] $5
  * [ ] $6
  * [ ] $7
  * [ ] $8
  * [ ] $9

  *Chosen Research-Goal/Hypothesis*
    $0

== Plan ([[plan.`!p snip.rv = snip.basename`|plan]]) ==

= Act =
  

endsnippet

# [[<name_without_wiki>|goal_like_this]]
#snippet goal "writing a goal link to new OODA loop" 
#$1`!p
#goal_name_underscore = t[1].replace(" ", "_")
#goal_name_underscore = goal_name_underscore.replace("?", "")
#snip.rv = " [[{}|link]]".format(goal_name_underscore)
#`$2`!p
#from pathlib import Path
#current_line = snip.buffer[snip.buffer.cursor[0]]
#m = re.search('\[\[(.+)\\|.+\]\]', current_line)
#if m is not None and len(m.groups()) == 1:
#  file_name = m.group(1) + ".wiki"
#  with open(file_name, "w") as fp:
#    fp.write("[[{}|back]]\n".format(snip.basename))
#  if len(file_name) >= 7:
#    try:
#      os.remove(str(Path(file_name).stem)[0:-1]+".wiki")
#    except:
#			# might be making file noise
#			pass
#
#`
#* [ ] goal$0
#endsnippet 

snippet goal ""
${VISUAL}	[[`!p
import os
from pathlib import Path
text = snip.v.text.replace(" ", "_")
text = text.replace("?", "")
text = text.rstrip()
file_name = text + '.wiki'
current_dir = Path.cwd()
target_dir = Path(path).parent
os.chdir(target_dir)
with open(file_name, "w") as fp:
	fp.write("[[{}|back]]\n".format(snip.basename))
	title = text.replace("_", " ")
	words = [word.capitalize() for word in title.split(" ")]
	title = " ".join(words)
	fp.write("{}\n".format(title))
os.chdir(current_dir)
snip.rv = "{}|link]]".format(text)`$0
endsnippet


snippet uuid "UUID" !b
`!p import uuid
if not snip.c:
  snip.rv = uuid.uuid4().hex`
endsnippet
